/* tslint:disable */
/* eslint-disable */
/**
 * task-manager API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { Configuration } from "./configuration.ts";
import type { AxiosPromise, RawAxiosRequestConfig, AxiosInstance } from "axios";
import globalAxios from "./../axios.js";
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
  // @ts-ignore
} from "./common.ts";
import type { RequestArgs } from "./base.ts";
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  BaseAPI,
  RequiredError,
  operationServerMap,
  // @ts-ignore
} from "./base.ts";

/**
 *
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
  /**
   * Some description for name.
   * @type {string}
   * @memberof CreateProjectRequest
   */
  name?: string;
}
/**
 *
 * @export
 * @interface CreateTaskRequest
 */
export interface CreateTaskRequest {
  /**
   * Some description for name.
   * @type {string}
   * @memberof CreateTaskRequest
   */
  name?: string;
  /**
   * Some description for completed.
   * @type {boolean}
   * @memberof CreateTaskRequest
   */
  completed?: boolean;
}
/**
 *
 * @export
 * @interface DeleteProject200Response
 */
export interface DeleteProject200Response {
  /**
   *
   * @type {string}
   * @memberof DeleteProject200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface DeleteTask200Response
 */
export interface DeleteTask200Response {
  /**
   *
   * @type {string}
   * @memberof DeleteTask200Response
   */
  message?: string;
}
/**
 *
 * @export
 * @interface GetProjectById404Response
 */
export interface GetProjectById404Response {
  /**
   *
   * @type {string}
   * @memberof GetProjectById404Response
   */
  error?: string;
}
/**
 *
 * @export
 * @interface GetProjects200ResponseInner
 */
export interface GetProjects200ResponseInner {
  /**
   * An identifier formatted as UUID.
   * @type {string}
   * @memberof GetProjects200ResponseInner
   */
  id?: string;
  /**
   * Some description for name.
   * @type {string}
   * @memberof GetProjects200ResponseInner
   */
  name?: string;
}
/**
 *
 * @export
 * @interface GetTaskById404Response
 */
export interface GetTaskById404Response {
  /**
   *
   * @type {string}
   * @memberof GetTaskById404Response
   */
  error?: string;
}
/**
 *
 * @export
 * @interface GetTasks200ResponseInner
 */
export interface GetTasks200ResponseInner {
  /**
   * An identifier formatted as UUID.
   * @type {string}
   * @memberof GetTasks200ResponseInner
   */
  id?: string;
  /**
   * Some description for name.
   * @type {string}
   * @memberof GetTasks200ResponseInner
   */
  name?: string;
  /**
   * Some description for completed.
   * @type {boolean}
   * @memberof GetTasks200ResponseInner
   */
  completed?: boolean;
}
/**
 *
 * @export
 * @interface LoginUser200Response
 */
export interface LoginUser200Response {
  /**
   *
   * @type {string}
   * @memberof LoginUser200Response
   */
  access_token?: string;
}
/**
 *
 * @export
 * @interface LoginUser401Response
 */
export interface LoginUser401Response {
  /**
   *
   * @type {string}
   * @memberof LoginUser401Response
   */
  error?: string;
}
/**
 *
 * @export
 * @interface PatchUserRequest
 */
export interface PatchUserRequest {
  /**
   * Some description for password.
   * @type {string}
   * @memberof PatchUserRequest
   */
  password?: string;
  /**
   * Some description for email.
   * @type {string}
   * @memberof PatchUserRequest
   */
  email?: string;
  /**
   * Some description for name.
   * @type {string}
   * @memberof PatchUserRequest
   */
  name?: string;
}
/**
 * Some description for Project.
 * @export
 * @interface Project
 */
export interface Project {
  /**
   * Some description for string.
   * @type {string}
   * @memberof Project
   */
  name?: string;
}
/**
 *
 * @export
 * @interface SignupUser201Response
 */
export interface SignupUser201Response {
  /**
   * An identifier formatted as UUID.
   * @type {string}
   * @memberof SignupUser201Response
   */
  id?: string;
  /**
   * Some description for password.
   * @type {string}
   * @memberof SignupUser201Response
   */
  password?: string;
  /**
   * Some description for email.
   * @type {string}
   * @memberof SignupUser201Response
   */
  email?: string;
  /**
   * Some description for name.
   * @type {string}
   * @memberof SignupUser201Response
   */
  name?: string;
}
/**
 *
 * @export
 * @interface SignupUser401Response
 */
export interface SignupUser401Response {
  /**
   *
   * @type {string}
   * @memberof SignupUser401Response
   */
  error?: string;
}
/**
 *
 * @export
 * @interface SignupUserRequest
 */
export interface SignupUserRequest {
  /**
   *
   * @type {string}
   * @memberof SignupUserRequest
   */
  email?: string;
  /**
   *
   * @type {string}
   * @memberof SignupUserRequest
   */
  password?: string;
}
/**
 * Some description for Task.
 * @export
 * @interface Task
 */
export interface Task {
  /**
   * Some description for string.
   * @type {string}
   * @memberof Task
   */
  name?: string;
  /**
   * Some description for boolean.
   * @type {boolean}
   * @memberof Task
   */
  completed?: boolean;
}
/**
 * Some description for User.
 * @export
 * @interface User
 */
export interface User {
  /**
   * Some description for string.
   * @type {string}
   * @memberof User
   */
  password?: string;
  /**
   * Some description for string.
   * @type {string}
   * @memberof User
   */
  email?: string;
  /**
   * Some description for string.
   * @type {string}
   * @memberof User
   */
  name?: string;
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject: async (
      createProjectRequest: CreateProjectRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createProjectRequest' is not null or undefined
      assertParamExists(
        "createProject",
        "createProjectRequest",
        createProjectRequest,
      );
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProjectRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteProject", "id", id);
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectById: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getProjectById", "id", id);
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/projects`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject: async (
      id: string,
      createProjectRequest: CreateProjectRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchProject", "id", id);
      // verify required parameter 'createProjectRequest' is not null or undefined
      assertParamExists(
        "patchProject",
        "createProjectRequest",
        createProjectRequest,
      );
      const localVarPath = `/projects/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createProjectRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createProject(
      createProjectRequest: CreateProjectRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetProjects200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(
        createProjectRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProjectApi.createProject"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteProject(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DeleteProject200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProjectApi.deleteProject"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjectById(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetProjects200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectById(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProjectApi.getProjectById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getProjects(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetProjects200ResponseInner>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getProjects(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProjectApi.getProjects"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchProject(
      id: string,
      createProjectRequest: CreateProjectRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetProjects200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchProject(
        id,
        createProjectRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["ProjectApi.patchProject"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = ProjectApiFp(configuration);
  return {
    /**
     *
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createProject(
      createProjectRequest: CreateProjectRequest,
      options?: any,
    ): AxiosPromise<GetProjects200ResponseInner> {
      return localVarFp
        .createProject(createProjectRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteProject(
      id: string,
      options?: any,
    ): AxiosPromise<DeleteProject200Response> {
      return localVarFp
        .deleteProject(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjectById(
      id: string,
      options?: any,
    ): AxiosPromise<GetProjects200ResponseInner> {
      return localVarFp
        .getProjectById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProjects(
      options?: any,
    ): AxiosPromise<Array<GetProjects200ResponseInner>> {
      return localVarFp
        .getProjects(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {CreateProjectRequest} createProjectRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchProject(
      id: string,
      createProjectRequest: CreateProjectRequest,
      options?: any,
    ): AxiosPromise<GetProjects200ResponseInner> {
      return localVarFp
        .patchProject(id, createProjectRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
  /**
   *
   * @param {CreateProjectRequest} createProjectRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public createProject(
    createProjectRequest: CreateProjectRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProjectApiFp(this.configuration)
      .createProject(createProjectRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public deleteProject(id: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .deleteProject(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjectById(id: string, options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getProjectById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public getProjects(options?: RawAxiosRequestConfig) {
    return ProjectApiFp(this.configuration)
      .getProjects(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {CreateProjectRequest} createProjectRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ProjectApi
   */
  public patchProject(
    id: string,
    createProjectRequest: CreateProjectRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return ProjectApiFp(this.configuration)
      .patchProject(id, createProjectRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * TaskApi - axios parameter creator
 * @export
 */
export const TaskApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {string} projectId project_id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTask: async (
      projectId: string,
      createTaskRequest: CreateTaskRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("createTask", "projectId", projectId);
      // verify required parameter 'createTaskRequest' is not null or undefined
      assertParamExists("createTask", "createTaskRequest", createTaskRequest);
      const localVarPath = `/projects/{project_id}/tasks`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTaskRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("deleteTask", "id", id);
      const localVarPath = `/tasks/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "DELETE",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskById: async (
      id: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("getTaskById", "id", id);
      const localVarPath = `/tasks/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} projectId project_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasks: async (
      projectId: string,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'projectId' is not null or undefined
      assertParamExists("getTasks", "projectId", projectId);
      const localVarPath = `/projects/{project_id}/tasks`.replace(
        `{${"project_id"}}`,
        encodeURIComponent(String(projectId)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTask: async (
      id: string,
      createTaskRequest: CreateTaskRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      assertParamExists("patchTask", "id", id);
      // verify required parameter 'createTaskRequest' is not null or undefined
      assertParamExists("patchTask", "createTaskRequest", createTaskRequest);
      const localVarPath = `/tasks/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        createTaskRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TaskApi - functional programming interface
 * @export
 */
export const TaskApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TaskApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {string} projectId project_id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createTask(
      projectId: string,
      createTaskRequest: CreateTaskRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetTasks200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createTask(
        projectId,
        createTaskRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TaskApi.createTask"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteTask(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<DeleteTask200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TaskApi.deleteTask"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTaskById(
      id: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetTasks200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskById(
        id,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TaskApi.getTaskById"]?.[
          localVarOperationServerIndex
        ]?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} projectId project_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getTasks(
      projectId: string,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<GetTasks200ResponseInner>>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getTasks(
        projectId,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TaskApi.getTasks"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {string} id id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchTask(
      id: string,
      createTaskRequest: CreateTaskRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<GetTasks200ResponseInner>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchTask(
        id,
        createTaskRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["TaskApi.patchTask"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * TaskApi - factory interface
 * @export
 */
export const TaskApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TaskApiFp(configuration);
  return {
    /**
     *
     * @param {string} projectId project_id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTask(
      projectId: string,
      createTaskRequest: CreateTaskRequest,
      options?: any,
    ): AxiosPromise<GetTasks200ResponseInner> {
      return localVarFp
        .createTask(projectId, createTaskRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTask(id: string, options?: any): AxiosPromise<DeleteTask200Response> {
      return localVarFp
        .deleteTask(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTaskById(
      id: string,
      options?: any,
    ): AxiosPromise<GetTasks200ResponseInner> {
      return localVarFp
        .getTaskById(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} projectId project_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTasks(
      projectId: string,
      options?: any,
    ): AxiosPromise<Array<GetTasks200ResponseInner>> {
      return localVarFp
        .getTasks(projectId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id id
     * @param {CreateTaskRequest} createTaskRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchTask(
      id: string,
      createTaskRequest: CreateTaskRequest,
      options?: any,
    ): AxiosPromise<GetTasks200ResponseInner> {
      return localVarFp
        .patchTask(id, createTaskRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TaskApi - object-oriented interface
 * @export
 * @class TaskApi
 * @extends {BaseAPI}
 */
export class TaskApi extends BaseAPI {
  /**
   *
   * @param {string} projectId project_id
   * @param {CreateTaskRequest} createTaskRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskApi
   */
  public createTask(
    projectId: string,
    createTaskRequest: CreateTaskRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TaskApiFp(this.configuration)
      .createTask(projectId, createTaskRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskApi
   */
  public deleteTask(id: string, options?: RawAxiosRequestConfig) {
    return TaskApiFp(this.configuration)
      .deleteTask(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskApi
   */
  public getTaskById(id: string, options?: RawAxiosRequestConfig) {
    return TaskApiFp(this.configuration)
      .getTaskById(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} projectId project_id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskApi
   */
  public getTasks(projectId: string, options?: RawAxiosRequestConfig) {
    return TaskApiFp(this.configuration)
      .getTasks(projectId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id id
   * @param {CreateTaskRequest} createTaskRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TaskApi
   */
  public patchTask(
    id: string,
    createTaskRequest: CreateTaskRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return TaskApiFp(this.configuration)
      .patchTask(id, createTaskRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}

/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers: async (
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser: async (
      signupUserRequest: SignupUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signupUserRequest' is not null or undefined
      assertParamExists("loginUser", "signupUserRequest", signupUserRequest);
      const localVarPath = `/login`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signupUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {PatchUserRequest} patchUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUser: async (
      patchUserRequest: PatchUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'patchUserRequest' is not null or undefined
      assertParamExists("patchUser", "patchUserRequest", patchUserRequest);
      const localVarPath = `/user`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "PATCH",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      // authentication BearerAuth required
      // http bearer authentication required
      await setBearerAuthToObject(localVarHeaderParameter, configuration);

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        patchUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupUser: async (
      signupUserRequest: SignupUserRequest,
      options: RawAxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'signupUserRequest' is not null or undefined
      assertParamExists("signupUser", "signupUserRequest", signupUserRequest);
      const localVarPath = `/signup`;
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }

      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      setSearchParams(localVarUrlObj, localVarQueryParameter);
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      localVarRequestOptions.data = serializeDataIfNeeded(
        signupUserRequest,
        localVarRequestOptions,
        configuration,
      );

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getUsers(
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<SignupUser201Response>>
    > {
      const localVarAxiosArgs =
        await localVarAxiosParamCreator.getUsers(options);
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.getUsers"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginUser(
      signupUserRequest: SignupUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<LoginUser200Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.loginUser(
        signupUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.loginUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {PatchUserRequest} patchUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async patchUser(
      patchUserRequest: PatchUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignupUser201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.patchUser(
        patchUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.patchUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async signupUser(
      signupUserRequest: SignupUserRequest,
      options?: RawAxiosRequestConfig,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<SignupUser201Response>
    > {
      const localVarAxiosArgs = await localVarAxiosParamCreator.signupUser(
        signupUserRequest,
        options,
      );
      const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
      const localVarOperationServerBasePath =
        operationServerMap["UserApi.signupUser"]?.[localVarOperationServerIndex]
          ?.url;
      return (axios, basePath) =>
        createRequestFunction(
          localVarAxiosArgs,
          globalAxios,
          BASE_PATH,
          configuration,
        )(axios, localVarOperationServerBasePath || basePath);
    },
  };
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = UserApiFp(configuration);
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsers(options?: any): AxiosPromise<Array<SignupUser201Response>> {
      return localVarFp
        .getUsers(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginUser(
      signupUserRequest: SignupUserRequest,
      options?: any,
    ): AxiosPromise<LoginUser200Response> {
      return localVarFp
        .loginUser(signupUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {PatchUserRequest} patchUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    patchUser(
      patchUserRequest: PatchUserRequest,
      options?: any,
    ): AxiosPromise<SignupUser201Response> {
      return localVarFp
        .patchUser(patchUserRequest, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {SignupUserRequest} signupUserRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signupUser(
      signupUserRequest: SignupUserRequest,
      options?: any,
    ): AxiosPromise<SignupUser201Response> {
      return localVarFp
        .signupUser(signupUserRequest, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public getUsers(options?: RawAxiosRequestConfig) {
    return UserApiFp(this.configuration)
      .getUsers(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignupUserRequest} signupUserRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public loginUser(
    signupUserRequest: SignupUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .loginUser(signupUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {PatchUserRequest} patchUserRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public patchUser(
    patchUserRequest: PatchUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .patchUser(patchUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {SignupUserRequest} signupUserRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UserApi
   */
  public signupUser(
    signupUserRequest: SignupUserRequest,
    options?: RawAxiosRequestConfig,
  ) {
    return UserApiFp(this.configuration)
      .signupUser(signupUserRequest, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
